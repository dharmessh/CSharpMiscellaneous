using System;
using System.Security.Cryptography.X509Certificates;

namespace Practice
{
    internal class Program
    {
        static void Main()
        {
            // Sample Array of Integers
            int[] numbersA = { 1, 2, 3, 4, 5, 6, 7 };
            int[] numbersB = { 1, 3, 5, 7, 8, 9, 10 };
            // Result : 1, 3, 5, 7

            int[] numbersC = { 1, 2, 2, 4, 5, 7, 7 };
            int[] numbersD = { 1, 3, 5, 7, 8, 9, 10 };
            // Result : 1, 5, 7

            int[] numbersE = { 1, 1, 2, 4, 5, 7, 7,  10, 11, 12, 13, 14, 20 };
            int[] numbersF = { 1, 1, 5, 7, 8, 9, 10, 13, 20 };
            // Result : 1, 5, 7, 10, 13, 20

            // Finding InterSections
            var newList = FindIntersectionsV2(numbersF, numbersE);
            Console.WriteLine($"Total Count: {newList.Count}");
            foreach(var i in newList)
            {
                Console.WriteLine(i);
            }
        }

        // Brute Force Approach
        public static List<int> FindIntersectionsV1(int[] inputA, int[] inputB)
        {
            List<int> result = new List<int>();
            int[] visitedElements = new int[inputB.Length];

            for (int i = 0; i < inputA.Length; i++)
            {
                for (int j = 0; j < inputB.Length; j++)
                {
                    if (inputA[i] == inputB[j] && visitedElements[j] != 1)
                    {
                        result.Add(inputA[i]);
                        visitedElements[j] = 1;
                        break;
                    }
                }
            }
            return result;
        }

        // https://www.geeksforgeeks.org/problems/intersection-of-two-sorted-array-1587115620/1
        // GFG - Intersection of two sorted arrays
        // Optimal Approach
        public static List<int> FindIntersectionsV2(int[] inputA, int[] inputB)
        {
            int i = 0;
            int j = 0;
            List<int> result = new List<int>();

            while (i < inputA.Length && j < inputB.Length)
            {
                // Elements which are appearing twice in both the arrays will be added once only in the final resultset
                while (i < inputA.Length - 1 && inputA[i] == inputA[i+1])
                {
                    i++;
                }

                // Elements which are appearing twice in both the arrays will be added once only in the final resultset
                while (j < inputB.Length - 1 && inputB[j] == inputB[j + 1])
                {
                    j++;
                }

                if (inputA[i] < inputB[j])
                {
                    i++;
                }
                else if (inputB[j] < inputA[i])
                {
                    j++;
                }
                else
                {
                    result.Add(inputA[i]);
                    i++; j++;
                }
            }
            return result;
        }
    }
}
